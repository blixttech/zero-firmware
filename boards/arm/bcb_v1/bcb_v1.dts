/* SPDX-License-Identifier: Apache-2.0 */

/dts-v1/;

#include <nxp/nxp_k6x.dtsi>
#include <dt-bindings/pinctrl/kinetis-pinmux.h>
#include <dt-bindings/adc/kinetis-adc.h>
#include <dt-bindings/timer/input-capture.h>

/ {
    model = "Blixt Circuit Breaker (V1)";
    compatible = "nxp,mk64f12", "nxp,k64f", "nxp,k6x";

    /* These aliases are provided for compatibility with the samples */
    aliases {
        led0 = &led_red;
        led1 = &led_green;
        sw1 = &sw_front;
        breaker = &breaker;
    };

    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,code-partition = &slot0_partition;
        zephyr,console = &uart4;
        zephyr,shell-uart = &uart4;
        zephyr,uart-pipe = &uart4;
    };

    /* PIT is not yet added into nxp_k6x.dtsi in the upstream zephyr-os repository. */
    soc {
        pit0: pit@40037000 {
            compatible = "nxp,kinetis-pit-ctd-counter";
            reg = <0x40037000 0x1000>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x103c 23>;
            interrupts = <48 0>, <49 0>, <50 0>, <51 0>;
            label = "PIT_0";
            status = "okay";
        };
    };

    pins {
        uart4_pins: uart4_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&porte 24 PORT_PCR_MUX(PORT_PCR_MUX_ALT3)>,    /* UART_TX */
                        <&porte 25 PORT_PCR_MUX(PORT_PCR_MUX_ALT3)>;    /* UART_RX */
            pinmux-names =  "UART_TX",
                            "UART_RX";
            label = "UART4_PINS";
        };

        enet_pins: enet_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&porta 5  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXER */
                        <&porta 12 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXD1 */
                        <&porta 13 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXD0 */
                        <&porta 14 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_CRS_DV */
                        <&porta 15 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXEN */
                        <&porta 16 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXD0 */
                        <&porta 17 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXD1 */
                        <&portb 0  (PORT_PCR_MUX(PORT_PCR_MUX_ALT4) 
                                    | PORT_PCR_ODE_MASK 
                                    | PORT_PCR_PE_MASK 
                                    | PORT_PCR_PS_MASK)>,               /* PHY_MDIO */
                        <&portb 1  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_MDC */
                        <&portb 2  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* PHY_RESET */
                        <&portb 3  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>;    /* PHY_INTERRUPT */

            pinmux-names =  "PHY_RXER",
                            "PHY_RXD1",
                            "PHY_RXD0",
                            "PHY_CRS_DV",
                            "PHY_TXEN",
                            "PHY_TXD0",
                            "PHY_TXD1",
                            "PHY_MDIO",
                            "PHY_MDC",
                            "PHY_RESET",
                            "PHY_INTERRUPT";
            label = "ENET_PINS";
        };

        breaker_pins: breaker_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&portc 14 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* LED_RED */
                        <&portc 15 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* LED_GREEN */
                        <&portc 13 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* SW_FRONT */
                        <&portd 4  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* ON_OFF */
                        <&portd 5  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OC_OT_RESET */
                        <&portd 0  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* ON_OFF_STATUS */
                        <&portd 6  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OC_TEST_TR_N */
                        <&portd 7  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OC_TEST_TR_P */
                        <&portc 2  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* V_MAINS */
                        <&portc 0  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_LOW_GAIN */
                        <&portc 1  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_HIGH_GAIN */
                        <&portc 9  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_MOSFET_OUT */
                        <&porte 1  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_MOSFET_IN */
                        <&portb 10 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_AMBIENT */
                        <&portc 8  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* REF_1V5 */
                        <&portc 10 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_IN */
                        <&portc 11 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_OUT */
                        <&portb 11 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_CTRL */
                        <&portd 1  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* ON_OFF_STATUS_M (mirrored) */
                        <&portd 2  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* OC_TEST_TR_N_M (mirrored) */
                        <&portd 3  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* OC_TEST_TR_P_M (mirrored) */
                        <&portc 6  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_LOW_GAIN_CMP0_IN0 */
                        <&portc 7  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_HIGH_GAIN_CMP0_IN1 */
                        <&portc 3  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>;    /* REF_1V5_CMP1_IN1 */
            pinmux-names =  "LED_RED",
                            "LED_GREEN",
                            "SW_FRONT",
                            "ON_OFF",
                            "OC_OT_RESET",
                            "ON_OFF_STATUS",
                            "OC_TEST_TR_N",
                            "OC_TEST_TR_P",
                            "V_MAINS",
                            "I_LOW_GAIN",
                            "I_HIGH_GAIN",
                            "T_MOSFET_OUT",
                            "T_MOSFET_IN",
                            "T_AMBIENT",
                            "REF_1V5",
                            "HW_REV_IN",
                            "HW_REV_OUT",
                            "HW_REV_CTRL",
                            "ON_OFF_STATUS_M",
                            "OC_TEST_TR_N_M",
                            "OC_TEST_TR_P_M",
                            "I_LOW_GAIN_CMP0_IN0",
                            "I_HIGH_GAIN_CMP0_IN1",
                            "REF_1V5_CMP1_IN1";
            label = "BREAKER_PINS";
        };
    };

    devices {
        breaker: breaker {
            compatible = "blixt,breaker";
            label = "BLIXT_BREAKER";
            leds {
                compatible = "gpio-leds";
                led_red: led_red {
                    gpios = <&gpioc 14 GPIO_ACTIVE_LOW>;
                    label = "LED_RED";
                };
                led_green: led_green {
                    gpios = <&gpioc 15 GPIO_ACTIVE_LOW>;
                    label = "LED_GREEN";
                };
            };

            switches {
                compatible = "gpio-keys";
                sw_front: sw_front {
                    gpios = <&gpiod 4 GPIO_ACTIVE_LOW>;
                    label = "SW_FRONT";
                };
            };

            dctrl: dctrl {
                compatible = "blixt,breaker-gpio";
                gpios = <&gpiod 4  GPIO_ACTIVE_HIGH>, 
                        <&gpiod 5  GPIO_ACTIVE_HIGH>,
                        <&gpiod 0  GPIO_ACTIVE_HIGH>,
                        <&gpiod 6  GPIO_ACTIVE_HIGH>,
                        <&gpiod 7  GPIO_ACTIVE_HIGH>;
                gpio-names =    "ON_OFF", 
                                "OC_OT_RESET",
                                "ON_OFF_STATUS",
                                "OC_TEST_TR_N",
                                "OC_TEST_TR_P";
                label = "DCTRL_IO";
            };

            actrl {
                compatible = "blixt,breaker-dac";
                io-channels =  <&dac0 0>;
                io-channel-names = "OC_LIMIT_ADJ";
                pwms = <&ftm2 0 1000 0>;
                pwm-names = "OC_TEST_ADJ";
                label = "ANALOG_CTRL";
            };

            itimestamp: itimestamp {
                compatible = "blixt,breaker-input-timestamp";
                input-captures =    <&ftm3 0 IC_EDGE_SINGLE_RISING>,
                                    <&ftm3 1 IC_EDGE_SINGLE_FALLING>,
                                    <&ftm3 2 IC_EDGE_SINGLE_RISING>,
                                    <&ftm3 3 IC_EDGE_SINGLE_RISING>;
                input-capture-names =   "ON_OFF_STATUS_R",  /* capturing the rising edge */
                                        "ON_OFF_STATUS_F",  /* capturing the falling edge */
                                        "OC_TEST_TR_N",     /* only rising edge */
                                        "OC_TEST_TR_P";     /* only rising edge */
                label = "INPUT_TIMESTAMP";
            };

            aread: aread {
                compatible = "blixt,breaker-adc";
                io-channels =   <&adc0 14 KINETIS_ADC_MUXSEL_A>, /* I_LOW_GAIN */
                                <&adc0 15 KINETIS_ADC_MUXSEL_A>, /* I_HIGH_GAIN */
                                <&adc0 4  KINETIS_ADC_MUXSEL_B>, /* V_MAINS */
                                <&adc1 5  KINETIS_ADC_MUXSEL_A>, /* T_MOSFET_IN */
                                <&adc1 5  KINETIS_ADC_MUXSEL_B>, /* T_MOSFET_OUT */
                                <&adc1 14 KINETIS_ADC_MUXSEL_A>, /* T_AMBIENT */
                                <&adc1 6  KINETIS_ADC_MUXSEL_B>, /* HW_REV_IN */
                                <&adc1 7  KINETIS_ADC_MUXSEL_B>, /* HW_REV_OUT */
                                <&adc1 15 KINETIS_ADC_MUXSEL_A>, /* HW_REV_CTRL */
                                <&adc1 4  KINETIS_ADC_MUXSEL_A>, /* OC_TEST_ADJ */
                                <&adc1 4  KINETIS_ADC_MUXSEL_B>; /* REF_1V5 */
                io-channel-names =  "I_LOW_GAIN", 
                                    "I_HIGH_GAIN",
                                    "V_MAINS",
                                    "T_MOSFET_IN", 
                                    "T_MOSFET_OUT", 
                                    "T_AMBIENT",
                                    "HW_REV_IN",
                                    "HW_REV_OUT",
                                    "HW_REV_CTRL",
                                    "OC_TEST_ADJ",
                                    "REF_1V5";  
                label = "ANALOG_READ";
            };

            acmp {
                /* Have to make DTS bingings and devicetree nodes for the comparators */
            };

        };
    };
};

&cpu0 {
    clock-frequency = <120000000>;
};

/* Overlay pinmux nodes with the label property to use use devicetree API. */
&porta {
    label = "porta";
    #pinmux-cells = <2>;
};

&portb {
    label = "portb";
    #pinmux-cells = <2>;
};

&portc {
    label = "portc";
    #pinmux-cells = <2>;
};

&portd {
    label = "portd";
    #pinmux-cells = <2>;
};

&porte {
    label = "porte";
    #pinmux-cells = <2>;
};

/* Enable GPIOs */
&gpioa {
    status = "okay";
};

&gpiob {
    status = "okay";
};

&gpioc {
    status = "okay";
};

&gpiod {
    status = "okay";
};

&gpioe {
    status = "okay";
};

&temp0 {
    io-channels = <&adc0 26 KINETIS_ADC_MUXSEL_A>, <&adc0 27 KINETIS_ADC_MUXSEL_A>;
};

&temp1 {
    io-channels = <&adc1 26 KINETIS_ADC_MUXSEL_A>, <&adc1 27 KINETIS_ADC_MUXSEL_A>;
};

&adc0 {
    compatible = "nxp,kinetis-adc16-pinscan";
    #io-channel-cells = <2>;
    status = "okay";
};

&adc1 {
    compatible = "nxp,kinetis-adc16-pinscan";
    #io-channel-cells = <2>;
    status = "okay";
};

/* Used for OC limit adjustment */
&dac0 {
    status = "okay";
};

/* Used for measuring OCP trigger timing. */
&ftm3 {
    compatible = "nxp,kinetis-ftm-input-capture";
    #input-capture-cells = <2>;
    status = "okay";
};

/* Used for OC test adjustment. */
&ftm2 {
    compatible = "nxp,kinetis-ftm-pwm";
    #pwm-cells = <3>;
    status = "okay";
};

&spi2 {
    status = "okay";
};

&uart4 {
    status = "okay";
    current-speed = <115200>;
};

&enet {
    status = "okay";
    ptp {
        status = "okay";
    };
};

&flash0 {
    /*
     * For more information, see:
     * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 0x00010000>;
            read-only;
        };

        /*
         * The flash starting at 0x00010000 and ending at
         * 0x0001ffff (sectors 16-31) is reserved for use
         * by the application.
         */
        storage_partition: partition@1e000 {
            label = "storage";
            reg = <0x0001e000 0x00002000>;
        };

        slot0_partition: partition@20000 {
            label = "image-0";
            reg = <0x00020000 0x00060000>;
        };
        slot1_partition: partition@80000 {
            label = "image-1";
            reg = <0x00080000 0x00060000>;
        };
        scratch_partition: partition@e0000 {
            label = "image-scratch";
            reg = <0x000e0000 0x00020000>;
        };
    };
};