/* SPDX-License-Identifier: Apache-2.0 */

/dts-v1/;

#include <nxp/nxp_k6x.dtsi>
#include <dt-bindings/pinctrl/kinetis-pinmux.h>
#include <dt-bindings/adc/kinetis-adc.h>
#include <dt-bindings/timer/input-capture.h>
#include <dt-bindings/timer/kinetis-ftm.h>
#include <dt-bindings/cmp/kinetis-cmp.h>

/ {
    model = "Blixt Circuit Breaker (V1)";
    compatible = "nxp,mk64f12", "nxp,k64f", "nxp,k6x";

    /* These aliases are provided for compatibility with the samples */
    aliases {
        //led0 = &led_red;
        //led1 = &led_green;
        sw1 = &sw_front;
        breaker = &breaker;
    };

    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,code-partition = &slot0_partition;
        zephyr,console = &uart4;
        zephyr,shell-uart = &uart4;
        zephyr,uart-pipe = &uart4;

        breaker,config_eeprom = &eeprom0;
    };

    
    soc {
        /* PIT is not in nxp_k6x.dtsi. */
        pit0: pit@40037000 {
            compatible = "nxp,kinetis-pit-ctd-counter";
            reg = <0x40037000 0x140>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x103c 23>;
            interrupts = <48 0>, <49 0>, <50 0>, <51 0>;
            label = "PIT_0";
            status = "okay";
        };

        /* LPTMR is not in nxp_k6x.dtsi. */
        lptmr0: lptmr@40040000 {
            compatible = "nxp,kinetis-lptmr";
            reg = <0x40040000 0x10>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x1038 0>;
            interrupts = <58 0>;
            clk-source = <0>;           /* MCGIRCLK- 32768 Hz */
            clock-frequency = <32768>;
            prescaler = <0>;            /* devided by 2 */
            period = <16384>;
            label = "LPTMR_0";
            status = "okay";
        };

        /* Due to the driver API limitations, a partially implemented DMA driver is used.
         * This driver only initialises the DMA and DMAMUX. 
         */
        edma0: dma-controller@40008000 {
            compatible = "nxp,kinetis-edma-partial";
            dma-channels = <16>;
            dma-requests = <64>;
            reg = <0x40008000 0x1000>, <0x40021000 0x1000>;
            reg-names = "DMA", "MUX";
            interrupts =    <0 0>,  <1 0>,  <2 0>,  <3 0>,
                            <4 0>,  <5 0>,  <6 0>,  <7 0>,
                            <8 0>,  <9 0>,  <10 0>, <11 0>,
                            <12 0>, <13 0>, <14 0>, <15 0>,
                            <16 0>;
            clocks =    <&sim KINETIS_SIM_CORESYS_CLK 0x1040 0x00000002>,   /* DMA clock */
                        <&sim KINETIS_SIM_BUS_CLK 0x103C 0x00000002>;       /* DMAMUX clock */
            clock-names = "DMA", "MUX";
            label = "EDMA0";
            #dma-cells = <3>;
            status = "okay";
        };

        cmp0: cmp@40073000 {
            compatible = "nxp,kinetis-cmp";
            reg = <0x40073000 0x6>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x1034 19>;
            interrupts = <40 0>;
            filter_count = <7>;
            filter_period = <255>;
            hysteresis = <KINETIS_CMP_HYSTERESIS_L0>;
            label = "CMP_0";
            #comparator-cells = <3>;
            status = "okay";
        };

        cmp1: cmp@40073008 {
            compatible = "nxp,kinetis-cmp";
            reg = <0x40073008 0x6>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x1034 19>;
            interrupts = <41 0>;
            filter_count = <7>;
            filter_period = <255>;
            hysteresis = <KINETIS_CMP_HYSTERESIS_L3>;
            label = "CMP_1";
            #comparator-cells = <3>;
            status = "okay";
        };

        cmp2: cmp@40073010 {
            compatible = "nxp,kinetis-cmp";
            reg = <0x40073010 0x6>;
            clocks = <&sim KINETIS_SIM_BUS_CLK 0x1034 19>;
            interrupts = <70 0>;
            filter_count = <7>;
            filter_period = <32>;
            hysteresis = <KINETIS_CMP_HYSTERESIS_L0>;
            label = "CMP_2";
            #comparator-cells = <3>;
            status = "disabled";
        };
    };

    pins {
        uart4_pins: uart4_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&porte 24 PORT_PCR_MUX(PORT_PCR_MUX_ALT3)>,    /* UART_TX */
                        <&porte 25 PORT_PCR_MUX(PORT_PCR_MUX_ALT3)>;    /* UART_RX */
            pinmux-names =  "UART_TX",
                            "UART_RX";
            label = "UART4_PINS";
        };

        spi2_pins: spi2_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&portb 23 PORT_PCR_MUX(PORT_PCR_MUX_ALT2)>,    /* SPI_MISO */
                        <&portb 22 PORT_PCR_MUX(PORT_PCR_MUX_ALT2)>,    /* SPI_MOSI */
                        <&portb 21 PORT_PCR_MUX(PORT_PCR_MUX_ALT2)>;    /* SPI_SCLK */
            pinmux-names =  "SPI_MISO",
                            "SPI_MOSI",
                            "SPI_SCLK";
            label = "SPI2_PINS";
        };

        eeprom0_pins: eeprom0_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&portb 20 PORT_PCR_MUX(PORT_PCR_MUX_ALT2)>,    /* EEPROM_SS */
                        <&portb 19 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>;    /* EEPROM_WP */
            pinmux-names =  "EEPROM_SS",
                            "EEPROM_WP";
            label = "EEPROM0_PINS";
        };

        enet_pins: enet_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&porta 5  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXER */
                        <&porta 12 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXD1 */
                        <&porta 13 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_RXD0 */
                        <&porta 14 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_CRS_DV */
                        <&porta 15 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXEN */
                        <&porta 16 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXD0 */
                        <&porta 17 PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_TXD1 */
                        <&portb 0  (PORT_PCR_MUX(PORT_PCR_MUX_ALT4) 
                                    | PORT_PCR_ODE_MASK 
                                    | PORT_PCR_PE_MASK 
                                    | PORT_PCR_PS_MASK)>,               /* PHY_MDIO */
                        <&portb 1  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* PHY_MDC */
                        <&portb 2  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* PHY_RESET */
                        <&portb 3  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>;    /* PHY_INTERRUPT */

            pinmux-names =  "PHY_RXER",
                            "PHY_RXD1",
                            "PHY_RXD0",
                            "PHY_CRS_DV",
                            "PHY_TXEN",
                            "PHY_TXD0",
                            "PHY_TXD1",
                            "PHY_MDIO",
                            "PHY_MDC",
                            "PHY_RESET",
                            "PHY_INTERRUPT";
            label = "ENET_PINS";
        };

        breaker_pins: breaker_pins {
            compatible = "blixt,pins";
            pinmuxs =   <&portc 14 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* LED_RED */
                        <&portc 15 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* LED_GREEN */
                        <&portc 13 PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* SW_FRONT */
                        <&portd 4  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* ON_OFF */
                        <&portd 5  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OCP_OTP_RESET */
                        <&portd 0  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* ON_OFF_STATUS */
                        <&portd 6  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OCP_TEST_TR_N */
                        <&portd 7  PORT_PCR_MUX(PORT_PCR_MUX_GPIO)>,    /* OCP_TEST_TR_P */
                        <&portb 18 PORT_PCR_MUX(PORT_PCR_MUX_ALT3)>,    /* OCP_TEST_ADJ_PWM */
                        <&portc 2  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* V_MAINS */
                        <&portc 0  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_LOW_GAIN */
                        <&portc 1  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_HIGH_GAIN */
                        <&portc 9  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_MOSFET_OUT */
                        <&porte 1  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_MOSFET_IN */
                        <&portb 10 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* T_AMBIENT */
                        <&portc 8  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* REF_1V5 */
                        <&portc 10 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_IN */
                        <&portc 11 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_OUT */
                        <&portb 11 PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* HW_REV_CTRL */
                        <&portd 1  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* ON_OFF_STATUS_M (mirrored) */
                        <&portd 2  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* OCP_TEST_TR_N_M (mirrored) */
                        <&portd 3  PORT_PCR_MUX(PORT_PCR_MUX_ALT4)>,    /* OCP_TEST_TR_P_M (mirrored) */
                        <&portc 6  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_LOW_GAIN_CMP0_IN0 */
                        <&portc 7  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* I_HIGH_GAIN_CMP0_IN1 */
                        <&portc 3  PORT_PCR_MUX(PORT_PCR_MUX_DISABLED_OR_ANALOG)>,    /* REF_1V5_CMP1_IN1 */
                        <&portc 5  PORT_PCR_MUX(PORT_PCR_MUX_ALT7)>;                  /* ZD_V_MAINS */
            pinmux-names =  "LED_RED",
                            "LED_GREEN",
                            "SW_FRONT",
                            "ON_OFF",
                            "OCP_OTP_RESET",
                            "ON_OFF_STATUS",
                            "OCP_TEST_TR_N",
                            "OCP_TEST_TR_P",
                            "OCP_TEST_ADJ_PWM",
                            "V_MAINS",
                            "I_LOW_GAIN",
                            "I_HIGH_GAIN",
                            "T_MOSFET_OUT",
                            "T_MOSFET_IN",
                            "T_AMBIENT",
                            "REF_1V5",
                            "HW_REV_IN",
                            "HW_REV_OUT",
                            "HW_REV_CTRL",
                            "ON_OFF_STATUS_M",
                            "OCP_TEST_TR_N_M",
                            "OCP_TEST_TR_P_M",
                            "I_LOW_GAIN_CMP0_IN0",
                            "I_HIGH_GAIN_CMP0_IN1",
                            "REF_1V5_CMP1_IN1",
                            "ZD_V_MAINS";
            label = "BREAKER_PINS";
        };
    };

    devices {
        breaker: breaker {
            compatible = "blixt,breaker";
            label = "BLIXT_BREAKER";
            leds {
                compatible = "gpio-leds";
                led_red: led_red {
                    gpios = <&gpioc 14 GPIO_ACTIVE_LOW>;
                    label = "LED_RED";
                };
                led_green: led_green {
                    gpios = <&gpioc 15 GPIO_ACTIVE_LOW>;
                    label = "LED_GREEN";
                };
            };

            user_iface: user_iface {
                compatible = "blixt,breaker-gpio";
                gpios = <&gpioc 14 GPIO_ACTIVE_LOW>, 
                        <&gpioc 15 GPIO_ACTIVE_LOW>,
                        <&gpiod 4 GPIO_ACTIVE_LOW>;
                gpio-names =    "LED_RED", 
                                "LED_GREEN", 
                                "SW_FRONT";
                label = "USER_IFACE";
            };

            switches {
                compatible = "gpio-keys";
                sw_front: sw_front {
                    gpios = <&gpiod 4 GPIO_ACTIVE_LOW>;
                    label = "SW_FRONT";
                };
            };

            dctrl: dctrl {
                compatible = "blixt,breaker-gpio";
                gpios = <&gpiod 4  GPIO_ACTIVE_HIGH>, 
                        <&gpiod 5  GPIO_ACTIVE_HIGH>,
                        <&gpiod 0  GPIO_ACTIVE_HIGH>,
                        <&gpiod 6  GPIO_ACTIVE_HIGH>,
                        <&gpiod 7  GPIO_ACTIVE_HIGH>,
                        <&gpioc 5  GPIO_ACTIVE_HIGH>;
                gpio-names =    "ON_OFF", 
                                "OCP_OTP_RESET",
                                "ON_OFF_STATUS",
                                "OCP_TEST_TR_N",
                                "OCP_TEST_TR_P",
                                "ZD_V_MAINS";
                label = "DCTRL_IO";
            };

            actrl: actrl {
                compatible = "blixt,breaker-dac";
                io-channels =  <&dac0 0>;
                io-channel-names = "OCP_LIMIT_ADJ";
                /* FTM based PWM driver uses Fixed Frequency Clock of 1.5625 MHz without prescaling. */
                pwms = <&ftm2 0 77 0>; /* FTM2_CH0, ~20khz */
                pwm-names = "OCP_TEST_ADJ";
                label = "ANALOG_CTRL";
            };

            itimestamp: itimestamp {
                compatible = "blixt,breaker-input-timestamp";
                input-captures =    <&ftm3 0 IC_EDGE_SINGLE_RISING>,
                                    <&ftm3 1 IC_EDGE_SINGLE_FALLING>,
                                    <&ftm3 2 IC_EDGE_SINGLE_RISING>,
                                    <&ftm3 3 IC_EDGE_SINGLE_RISING>,
                                    <&ftm0 2 IC_EDGE_DUAL_PULSE_RISING>;
                input-capture-names =   "ON_OFF_STATUS_R",  /* capturing the rising edge */
                                        "ON_OFF_STATUS_F",  /* capturing the falling edge */
                                        "OCP_TEST_TR_N",    /* only rising edge */
                                        "OCP_TEST_TR_P",    /* only rising edge */
                                        "ZD_V_MAINS";       /* pulse at rising edge */
                label = "INPUT_TIMESTAMP";
            };

            aread: aread {
                compatible = "blixt,breaker-adc";
                io-channels =   <&adc0 14 KINETIS_ADC_MUXSEL_A>, /* I_LOW_GAIN */
                                <&adc0 15 KINETIS_ADC_MUXSEL_A>, /* I_HIGH_GAIN */
                                <&adc0 4  KINETIS_ADC_MUXSEL_B>, /* V_MAINS */
                                <&adc1 5  KINETIS_ADC_MUXSEL_A>, /* T_MOSFET_IN */
                                <&adc1 5  KINETIS_ADC_MUXSEL_B>, /* T_MOSFET_OUT */
                                <&adc1 14 KINETIS_ADC_MUXSEL_A>, /* T_AMBIENT */
                                <&adc1 26 KINETIS_ADC_MUXSEL_A>, /* T_MCU */
                                <&adc1 6  KINETIS_ADC_MUXSEL_B>, /* HW_REV_IN */
                                <&adc1 7  KINETIS_ADC_MUXSEL_B>, /* HW_REV_OUT */
                                <&adc1 15 KINETIS_ADC_MUXSEL_A>, /* HW_REV_CTRL */
                                <&adc1 4  KINETIS_ADC_MUXSEL_A>, /* OC_TEST_ADJ */
                                <&adc1 4  KINETIS_ADC_MUXSEL_B>; /* REF_1V5 */
                io-channel-names =  "I_LOW_GAIN", 
                                    "I_HIGH_GAIN",
                                    "V_MAINS",
                                    "T_MOSFET_IN", 
                                    "T_MOSFET_OUT", 
                                    "T_AMBIENT",
                                    "T_MCU",
                                    "HW_REV_IN",
                                    "HW_REV_OUT",
                                    "HW_REV_CTRL",
                                    "OC_TEST_ADJ",
                                    "REF_1V5";  
                label = "ANALOG_READ";
            };

            acmp: acmp {
                /* Have to make DTS bingings and devicetree nodes for the comparators */
                compatible = "blixt,breaker-cmp";
                comparators =   <&cmp1 0 1 (KINETIS_CMP_EDGE_RISING | KINETIS_CMP_EDGE_FALLING)>,
                                <&cmp0 1 2 KINETIS_CMP_EDGE_RISING>;
                comparator-names =  "V_ZD", "I_ZD";
                label = "ANALOG_CMP";
            };

        };
    };
};

&cpu0 {
    clock-frequency = <120000000>;
};

/* Overlay pinmux nodes with the label property to use use devicetree API. */
&porta {
    label = "porta";
    #pinmux-cells = <2>;
};

&portb {
    label = "portb";
    #pinmux-cells = <2>;
};

&portc {
    label = "portc";
    #pinmux-cells = <2>;
};

&portd {
    label = "portd";
    #pinmux-cells = <2>;
};

&porte {
    label = "porte";
    #pinmux-cells = <2>;
};

/* Enable GPIOs */
&gpioa {
    status = "okay";
};

&gpiob {
    status = "okay";
};

&gpioc {
    status = "okay";
};

&gpiod {
    status = "okay";
};

&gpioe {
    status = "okay";
};

&temp0 {
    io-channels = <&adc0 26 KINETIS_ADC_MUXSEL_A>, <&adc0 27 KINETIS_ADC_MUXSEL_A>;
};

&temp1 {
    io-channels = <&adc1 26 KINETIS_ADC_MUXSEL_A>, <&adc1 27 KINETIS_ADC_MUXSEL_A>;
};

&adc0 {
    compatible = "nxp,kinetis-adc16-edma";
    triggers = <&ftm1 KINETIS_ADC_TRG_FTM_1>;
    max-channels = <3>;
    dmas =  <&edma0 0 40 0>, <&edma0 0 60 1>;
    dma-names = "RESULT", "CH";
    sample-interval = <200>;
    #io-channel-cells = <2>;
    status = "okay";
};

&adc1 {
    compatible = "nxp,kinetis-adc16-edma";
    triggers = <&lptmr0 KINETIS_ADC_TRG_LPTMR>;
    max-channels = <9>;
    dmas =  <&edma0 0 41 2>, <&edma0 0 61 3>;
    dma-names = "RESULT", "CH";
    sample-interval = <200>;
    #io-channel-cells = <2>;
    status = "okay";
};

/* Used for OC limit adjustment */
&dac0 {
    voltage-reference = <2>;
    status = "okay";
};

/* Used to generate ADC0 trigger */
&ftm0 {
    compatible = "nxp,kinetis-ftm-input-capture";
    clock-source = <KINETIS_FTM_CLK_SRC_FIXED_CLK>;
    /* FTM prescaler is a 7-bit counter.
     * So multiply the value of here by two to get the actual precaler value.
     */
    prescaler = <1>;
    glitch-filter = <15>;
    #input-capture-cells = <2>;
    status = "okay";
};

/* Used to generate ADC1 trigger */
&ftm1 {
    compatible = "nxp,kinetis-ftm-trigger";
    clock-source = <KINETIS_FTM_CLK_SRC_FIXED_CLK>;
    /* FTM prescaler is a 7-bit counter.
     * So multiply the value of here by two to get the actual precaler value.
     */
    prescaler = <1>;
    trigger-source = <0>;
    #trigger-cells = <1>;
    status = "okay";
};

/* Used for measuring OCP trigger timing. */
&ftm3 {
    compatible = "nxp,kinetis-ftm-input-capture";
    clock-source = <KINETIS_FTM_CLK_SRC_SYSTEM_CLK>;
    /* FTM prescaler is a 7-bit counter.
     * So multiply the value of here by two to get the actual precaler value.
     */
    prescaler = <2>;
    glitch-filter = <0>;
    #input-capture-cells = <2>;
    status = "okay";
};

/* Used for OC test adjustment. */
/* FTM based PWM driver uses Fixed Frequency Clock (MCGFFCLK)
 * CLOCK_SetInternalRefClkConfig() call in soc.c causes the MCGFFCLK to be 1.5625 MHz (50 MHz/32)
 * Have a look at the implementation of CLOCK_SetInternalRefClkConfig() in fsl_clock.c 
 */
&ftm2 {
    compatible = "nxp,kinetis-ftm-pwm";
    /* FTM prescaler is a 7-bit counter.
     * So multiply the value of here by two to get the actual precaler value.
     */
    prescaler = <1>;
    #pwm-cells = <3>;
    status = "okay";
};

&lptmr0 {
    compatible = "nxp,kinetis-lptmr-trigger";
    clk-source = <0>;   /* MCGIRCLK- 32768 Hz */
    prescaler = <0>;    /* devided by 2 */
    period = <128>;
    #trigger-cells = <1>;
    status = "okay";
};

&spi0 {
    status = "disabled";
};

&spi2 {
    status = "okay";
    cs-gpios = <&gpiob 20  GPIO_ACTIVE_LOW>;

    eeprom0: eeprom@0 {
        compatible = "st,m95080";
        reg = <0x0>;
        spi-max-frequency = <20000000>;
        size = <1024>;
        pagesize = <32>;
        address-width = <16>;
        timeout = <5>;
        wp-gpios = <&gpiob 19  GPIO_ACTIVE_LOW>;
        label = "EEPROM_M95080";
        status = "okay";
    }; 
};

&uart4 {
    status = "okay";
    current-speed = <115200>;
};

&enet {
    status = "okay";
    ptp {
        status = "okay";
    };
};

&flash0 {
    /*
     * For more information, see:
     * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 0x00010000>;
            read-only;
        };

        /*
         * The flash starting at 0x00010000 and ending at
         * 0x0001ffff (sectors 16-31) is reserved for use
         * by the application.
         */
        storage_partition: partition@1e000 {
            label = "storage";
            reg = <0x0001e000 0x00002000>;
        };

        slot0_partition: partition@20000 {
            label = "image-0";
            reg = <0x00020000 0x00060000>;
        };
        slot1_partition: partition@80000 {
            label = "image-1";
            reg = <0x00080000 0x00060000>;
        };
        scratch_partition: partition@e0000 {
            label = "image-scratch";
            reg = <0x000e0000 0x00020000>;
        };
    };
};